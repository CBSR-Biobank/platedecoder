//
// Gradle build file for platedecoder project.
//

apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'eclipse'

sourceCompatibility = 1.8
targetCompatibility = 1.8

[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

version = '0.1-SNAPSHOT'
mainClassName = "org.biobank.platedecoder.ui.PlateDecoder"

jar {
   manifest.attributes "Main-Class": "org.biobank.platedecoder.ui.PlateDecoder"
}

repositories {
   mavenLocal()
   mavenCentral()
}

dependencies {
   compile 'org.slf4j:slf4j-api:1.7.1', 'org.slf4j:slf4j-log4j12:1.7.12'
   compile 'org.controlsfx:controlsfx:8.40.9'
   compile 'net.sf.supercsv:super-csv:2.3.1'
   compile 'commons-codec:commons-codec:1.10'
   compile 'javax.json:javax.json-api:1.0'
   compile 'com.ning:async-http-client:1.9.31'
   compile 'com.fasterxml.jackson.jr:jackson-jr-all:2.6.2'
   runtime 'org.glassfish:javax.json:1.0.4'
   testCompile 'junit:junit:4.12'
   testCompile 'de.saxsys:jfx-testrunner:1.1'
}

test {
   systemProperty "java.library.path", "lib"
}

run {
   systemProperty "java.library.path", "lib"
}

tasks.withType(JavaExec) {
   jvmArgs '-Xmx1024m'
}

applicationDefaultJvmArgs = ["-Djava.library.path=./lib"]

task wrapper(type: Wrapper) {
   gradleVersion = '2.5'
}

allprojects {
   gradle.projectsEvaluated {
      tasks.withType(JavaCompile) {
         options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
      }
   }
}

task listJars << {
   configurations.compile.each { File file -> println file.name }
}

eclipse.classpath {

   /* With sources, it's much more convenient in debugging */
   downloadSources = true
   downloadJavadoc = true

   /* Ugly hack to stick the JNI pointer into the .classpath file. */
   file.withXml { provider ->
      provider.asNode().findAll { it.@path.contains('org.eclipse.jdt.launching.JRE_CONTAINER') }.each {
         it.appendNode('attributes')
         .appendNode('attribute',
                     [ name: 'org.eclipse.jdt.launching.CLASSPATH_ATTR_LIBRARY_PATH_ENTRY',
                       value: 'platedecoder/lib' ])
      }
   }
}
