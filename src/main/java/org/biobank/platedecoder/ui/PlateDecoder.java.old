package org.biobank.platedecoder.ui;

import java.io.File;
import java.util.Optional;

import javafx.application.Application;
import javafx.event.ActionEvent;
import javafx.scene.control.Button;
import javafx.scene.control.ButtonType;
import javafx.scene.control.Label;
import javafx.scene.control.RadioButton;
import javafx.scene.control.TextField;
import javafx.scene.control.ToggleGroup;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.Priority;
import javafx.stage.FileChooser;
import javafx.stage.FileChooser.ExtensionFilter;
import javafx.stage.Stage;

import org.controlsfx.dialog.Wizard;
import org.controlsfx.dialog.WizardPane;
import org.controlsfx.validation.ValidationSupport;
import org.controlsfx.validation.Validator;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class PlateDecoder extends Application {

    private static final Logger LOG = LoggerFactory.getLogger(PlateDecoder.class);

    private Stage stage;
    private ImageSourceWizardPane imageSourcePage;
    private FileChooseWizardPane fileChooseWizardPane;
    private DecodeImageWizardPane decodeImageWizardPane;

    public static void main(String[] args) {
        launch(args);
    }

    @Override
    public void start(Stage stage) throws Exception {
        this.stage = stage;
        imageSourcePage = new ImageSourceWizardPane();
        fileChooseWizardPane = new FileChooseWizardPane();
        decodeImageWizardPane = new DecodeImageWizardPane();

        Wizard wizard = new Wizard();
        wizard.setTitle("Plate decoder");
        Wizard.Flow branchingFlow = new Wizard.Flow() {

                @Override
                public Optional<WizardPane> advance(WizardPane currentPage) {
                    return Optional.of(getNext(currentPage));
                }

                @Override
                public boolean canAdvance(WizardPane currentPage) {
                    return currentPage != decodeImageWizardPane;
                }

                private WizardPane getNext(WizardPane currentPage) {
                    LOG.debug("getNext: currentPage: {}", currentPage);

                    if (currentPage == null) {
                        return imageSourcePage;
                    }

                    if (currentPage == imageSourcePage) {
                        ImageSourceSelection imageSource = imageSourcePage.getSelection();
                        switch (imageSource) {
                            case FILESYSTEM:
                                return fileChooseWizardPane;
                            case FLATBED:
                            case FLATBED_REGION:
                                // TODO return correct page
                                return imageSourcePage;

                            case NONE:
                            default:
                                throw new IllegalStateException(
                                    "invalid image source selected: " + imageSource);
                        }
                    }

                    if (currentPage == fileChooseWizardPane) {
                        return decodeImageWizardPane;
                    }

                    return imageSourcePage;
                }
            };
        wizard.setFlow(branchingFlow);

        wizard.showAndWait().ifPresent(result -> {
                if (result == ButtonType.FINISH) {
                    LOG.debug("Wizard finished, settings: " + wizard.getSettings());
                }
            });
    }

    public enum ImageSourceSelection {
        NONE,
        FILESYSTEM,
        FLATBED,
        FLATBED_REGION
    };

    public class ImageSourceWizardPane extends WizardPane {

        private final RadioButton filesystemBtn;
        private final RadioButton flatbedBtn;

        public ImageSourceWizardPane() {
            GridPane grid = new GridPane();
            grid.setVgap(10);
            grid.setHgap(10);
            grid.setMinSize(900, 500);

            final ToggleGroup toggleGroup = new ToggleGroup();

            filesystemBtn = new RadioButton("Filesystem");
            filesystemBtn.setId("image_source_file_system");
            filesystemBtn.setToggleGroup(toggleGroup);
            filesystemBtn.setSelected(true);
            grid.add(filesystemBtn, 0, 0);

            flatbedBtn = new RadioButton("Flatbed scanner");
            flatbedBtn.setId("image_source_flatbed");
            flatbedBtn.setToggleGroup(toggleGroup);
            grid.add(flatbedBtn, 0, 1);

            setHeaderText("Select an image source");
            setContent(grid);
        }

        public ImageSourceSelection getSelection() {
            if (filesystemBtn.isSelected()) {
                return ImageSourceSelection.FILESYSTEM;
            }

            if (flatbedBtn.isSelected()) {
                return ImageSourceSelection.FLATBED;
            }

            return ImageSourceSelection.NONE;
        }
    }

    public class FileChooseWizardPane extends WizardPane {

        private TextField filenameField;
        private File selectedFile;
        private ValidationSupport validationSupport = new ValidationSupport();

        public FileChooseWizardPane() {
            GridPane grid = new GridPane();
            grid.setVgap(10);
            grid.setHgap(10);
            grid.setMinSize(900, 500);

            Label label = new Label("File name:");
            grid.add(label, 0, 0);

            filenameField = new TextField("");
            filenameField.setId("image_filename");
            filenameField.setEditable(false);
            GridPane.setHgrow(filenameField, Priority.ALWAYS);
            grid.add(filenameField, 1, 0);

            final Button selectFileBtn = new Button("Select");
            selectFileBtn.setOnAction( (ActionEvent e) -> {
                    FileChooser fileChooser = new FileChooser();
                    fileChooser.setTitle("Open image file");
                    fileChooser.getExtensionFilters().addAll(
                        new ExtensionFilter("Image Files", "*.png", "*.jpg", "*.gif", "*.bmp"));
                    selectedFile = fileChooser.showOpenDialog(stage);
                    if (selectedFile != null) {
                        filenameField.setText(selectedFile.getName());
                    }
                });
            selectFileBtn.requestFocus();
            grid.add(selectFileBtn, 1, 1);

            setHeaderText("Select an image file");
            setContent(grid);

            validationSupport.registerValidator(
                filenameField,
                true,
                Validator.createEmptyValidator("please select a file"));
        }

        @Override
        public void onEnteringPage(Wizard wizard) {
            LOG.debug("onEnteringPage: ");
            //wizard.invalidProperty().bind(validationSupport.invalidProperty());
        }

        @Override
        public void onExitingPage(Wizard wizard) {
            LOG.debug("onExitingPage: ");
            //wizard.invalidProperty().unbind();
        }
    }

    public class DecodeImageWizardPane extends WizardPane {

        private TextField filenameField;

        public DecodeImageWizardPane() {
            GridPane grid = new GridPane();
            grid.setVgap(10);
            grid.setHgap(10);
            grid.setMinSize(900, 500);

            Label label = new Label("File name:");
            grid.add(label, 0, 0);

            filenameField = new TextField();
            filenameField.setId("image_filename_2");
            GridPane.setHgrow(filenameField, Priority.ALWAYS);
            grid.add(filenameField, 1, 0);

            setHeaderText("Align grid with barcodes");
            setContent(grid);
        }
    }

}
